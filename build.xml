<project name="apic-cicd" default="ci" basedir=".">
  <!-- ================== PROPERTIES ================== -->
  <property name="default.API_NAME" value="loan-api"/>
  <property name="default.API_VERSION" value="1.0.0"/>
  <property name="default.PRODUCT_NAME" value="loan-product"/>
  <property name="default.CATALOG_NAME" value="prod"/>

  <property environment="env"/>

  <tstamp>
    <format property="backup.timestamp" pattern="yyyyMMddHHmmss"/>
  </tstamp>

  <!-- ================== LOGIN ================== -->
  <target name="login">
    <echo message=":closed_lock_with_key: Logging in to API Connect..."/>
    <exec executable="apic" failonerror="true">
      <arg value="login"/>
      <arg value="--server"/>
      <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
      <arg value="--username"/>
      <arg value="umesh"/>
      <arg value="--password"/>
      <arg value="!n0r1t5@C"/>
      <arg value="--realm"/>
      <arg value="provider/default-idp-2"/>
    </exec>
  </target>

  <!-- ================== VALIDATE API ================== -->
  <target name="validate" depends="login">
    <echo message=":white_check_mark: Validating API YAML for ${API_NAME}_${API_VERSION}"/>
    <exec executable="apic" failonerror="true">
      <arg value="validate"/>
      <arg value="apis/${API_NAME}/${API_NAME}_${API_VERSION}.yaml"/>
    </exec>
  </target>

  <!-- ================== CHECK API ================== -->
  <target name="api-check" depends="validate">
    <echo message=":mag_right: Checking if API exists..."/>
    <exec executable="apic" failonerror="false" outputproperty="api.exists">
      <arg value="draft-apis:get"/>
      <arg value="${API_NAME}:${API_VERSION}"/>
      <arg value="--server"/>
      <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
      <arg value="--org"/>
      <arg value="indusapi-np"/>
    </exec>
    <echo message="API exists? ${api.exists}"/>
  </target>

  <!-- ================== PROCESS API ================== -->
  <target name="api-process" depends="api-check">
    <condition property="api.exists.true">
      <and>
        <isset property="api.exists"/>
        <matches string="${api.exists}" pattern=".*${API_NAME}:${API_VERSION}.*"/>
      </and>
    </condition>
    <antcall target="api-update"/>
    <antcall target="api-create"/>
  </target>

  <target name="api-create" unless="api.exists.true">
    <echo message=":new: Creating new draft API ${API_NAME}:${API_VERSION}"/>
    <exec executable="apic" failonerror="true">
      <arg value="draft-apis:create"/>
      <arg value="apis/${API_NAME}/${API_NAME}_${API_VERSION}.yaml"/>
      <arg value="--server"/>
      <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
      <arg value="--org"/>
      <arg value="indusapi-np"/>
    </exec>
  </target>

  <target name="api-update" if="api.exists.true">
    <echo message=":recycle: Updating existing draft API ${API_NAME}:${API_VERSION}"/>
    <exec executable="apic" failonerror="true">
      <arg value="draft-apis:update"/>
      <arg line="${API_NAME}:${API_VERSION} apis/${API_NAME}/${API_NAME}_${API_VERSION}.yaml"/>
      <arg value="--server"/>
      <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
      <arg value="--org"/>
      <arg value="indusapi-np"/>
    </exec>
  </target>

  <!-- ================== FIX PRODUCT API REFS ================== -->
  <target name="fix-refs" depends="api-process">
    <echo message=":wrench: Fixing API references in product YAML..."/>
    <exec executable="bash" failonerror="true">
      <arg value="/var/lib/jenkins/scripts/fix-refs.sh"/>
      <arg value="products/${PRODUCT_NAME}"/>
      <arg value="apis"/>
    </exec>
  </target>

  <!-- ================== CHECK PRODUCT ================== -->
  <target name="product-check" depends="fix-refs">
    <echo message=":mag_right: Checking if Product exists..."/>
    <exec executable="apic" failonerror="false" outputproperty="product.exists">
      <arg value="draft-products:get"/>
      <arg value="${PRODUCT_NAME}:${API_VERSION}"/>
      <arg value="--server"/>
      <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
      <arg value="--org"/>
      <arg value="indusapi-np"/>
    </exec>
    <echo message="Product exists? ${product.exists}"/>
  </target>

  <!-- ================== PROCESS PRODUCT ================== -->
  <target name="product-process" depends="product-check">
    <condition property="product.exists.true">
      <and>
        <isset property="product.exists"/>
        <matches string="${product.exists}" pattern=".*${PRODUCT_NAME}:${API_VERSION}.*"/>
      </and>
    </condition>
    <antcall target="product-update"/>
    <antcall target="product-create"/>
  </target>

  <target name="product-create" unless="product.exists.true">
    <echo message=":new: Creating new draft Product ${PRODUCT_NAME}:${API_VERSION}"/>
    <exec executable="apic" failonerror="true">
      <arg value="draft-products:create"/>
      <arg value="products/${PRODUCT_NAME}/${PRODUCT_NAME}_${API_VERSION}.yaml"/>
      <arg value="--server"/>
      <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
      <arg value="--org"/>
      <arg value="indusapi-np"/>
    </exec>
  </target>

  <target name="product-update" if="product.exists.true">
    <echo message=":recycle: Updating existing draft Product ${PRODUCT_NAME}:${API_VERSION}"/>
    <exec executable="apic" failonerror="true">
      <arg value="draft-products:update"/>
      <arg line="${PRODUCT_NAME}:${API_VERSION} products/${PRODUCT_NAME}/${PRODUCT_NAME}_${API_VERSION}.yaml"/>
      <arg value="--server"/>
      <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
      <arg value="--org"/>
      <arg value="indusapi-np"/>
    </exec>
  </target>

<!-- ================== PUBLISH PRODUCT ================== -->
<target name="publish" depends="product-process">
    <echo message=":rocket: Publishing Product ${PRODUCT_NAME}_${API_VERSION}.yaml to catalog ${CATALOG_NAME}"/>
    <exec executable="apic" failonerror="true">
        <arg value="products:publish"/>
        <arg value="products/${PRODUCT_NAME}/${PRODUCT_NAME}_${API_VERSION}.yaml"/>
        <arg value="--scope"/>
        <arg value="catalog"/>
        <arg value="--catalog"/>
        <arg value="${CATALOG_NAME}"/>
        <arg value="--server"/>
        <arg value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
        <arg value="--org"/>
        <arg value="indusapi-np"/>
    </exec>
</target>

<!-- ================== BACKUP ================== -->
<target name="backup" depends="publish">
    <echo message=":floppy_disk: Backing up API and Product definitions..."/>

    <mkdir dir="apis/${API_NAME}/api_backup"/>
    <mkdir dir="products/${PRODUCT_NAME}/product_backup"/>

    <copy file="apis/${API_NAME}/${API_NAME}_${API_VERSION}.yaml"
          tofile="apis/${API_NAME}/api_backup/${API_NAME}_${API_VERSION}_${backup.timestamp}.yaml"
          overwrite="true"/>
    <copy file="products/${PRODUCT_NAME}/${PRODUCT_NAME}_${API_VERSION}.yaml"
          tofile="products/${PRODUCT_NAME}/product_backup/${PRODUCT_NAME}_${API_VERSION}_${backup.timestamp}.yaml"
          overwrite="true"/>

    <exec executable="git">
        <arg value="add"/>
        <arg value="."/>
    </exec>

    <exec executable="git">
        <arg value="commit"/>
        <arg value="-m"/>
        <arg value="backup: ${API_NAME} v${API_VERSION} and ${PRODUCT_NAME} v${API_VERSION} at ${backup.timestamp}"/>
    </exec>

    <exec executable="git">
        <arg value="push"/>
        <arg value="origin"/>
        <arg value="HEAD:main"/>
    </exec>

    <echo message=":package: Backup files pushed to GitHub"/>
</target>

<!-- ================== CI PIPELINE ================== -->
<target name="ci" depends="backup">
    <echo message=":tada: CI/CD pipeline completed successfully!"/>
</target>
